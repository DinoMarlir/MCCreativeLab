From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: verdox <mail.ysp@web.de>
Date: Thu, 20 Jun 2024 12:39:36 +0000
Subject: [PATCH] Removing enums


diff --git a/src/main/java/io/papermc/paper/registry/PaperRegistries.java b/src/main/java/io/papermc/paper/registry/PaperRegistries.java
index 12220f78ffaf06433ada72fd0c7f22b97d55287d..d972781f9e7675985c155c7d83da2bf53aa904ca 100644
--- a/src/main/java/io/papermc/paper/registry/PaperRegistries.java
+++ b/src/main/java/io/papermc/paper/registry/PaperRegistries.java
@@ -85,6 +85,11 @@ public final class PaperRegistries {
             entry(Registries.MAP_DECORATION_TYPE, RegistryKey.MAP_DECORATION_TYPE, MapCursor.Type.class, CraftMapCursor.CraftType::new),
             entry(Registries.MENU, RegistryKey.MENU, MenuType.class, CraftMenuType::new),
 
+            entry(Registries.ATTRIBUTE, RegistryKey.ATTRIBUTE, org.bukkit.attribute.Attribute.class, org.bukkit.craftbukkit.attribute.CraftAttribute::new),
+            entry(Registries.POINT_OF_INTEREST_TYPE, RegistryKey.POI_TYPE, org.bukkit.PoiType.class, org.bukkit.craftbukkit.CraftPoiType::new),
+            entry(Registries.SCHEDULE, RegistryKey.ENTITY_SCHEDULE, org.bukkit.EntitySchedule.class, org.bukkit.craftbukkit.CraftEntitySchedule::new),
+            entry(Registries.ACTIVITY, RegistryKey.ENTITY_ACTIVITY, org.bukkit.EntityActivity.class, org.bukkit.craftbukkit.CraftEntityActivity::new),
+
             // data-drivens
             entry(Registries.STRUCTURE, RegistryKey.STRUCTURE, Structure.class, CraftStructure::new).delayed(),
             entry(Registries.TRIM_MATERIAL, RegistryKey.TRIM_MATERIAL, TrimMaterial.class, CraftTrimMaterial::new).delayed(),
@@ -98,7 +103,6 @@ public final class PaperRegistries {
             // api-only
             apiOnly(Registries.BIOME, RegistryKey.BIOME, () -> org.bukkit.Registry.BIOME),
             apiOnly(Registries.PAINTING_VARIANT, RegistryKey.PAINTING_VARIANT, () -> org.bukkit.Registry.ART),
-            apiOnly(Registries.ATTRIBUTE, RegistryKey.ATTRIBUTE, () -> org.bukkit.Registry.ATTRIBUTE),
             apiOnly(Registries.ENTITY_TYPE, RegistryKey.ENTITY_TYPE, () -> org.bukkit.Registry.ENTITY_TYPE),
             apiOnly(Registries.PARTICLE_TYPE, RegistryKey.PARTICLE_TYPE, () -> org.bukkit.Registry.PARTICLE_TYPE),
             apiOnly(Registries.POTION, RegistryKey.POTION, () -> org.bukkit.Registry.POTION),
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftEntityActivity.java b/src/main/java/org/bukkit/craftbukkit/CraftEntityActivity.java
new file mode 100644
index 0000000000000000000000000000000000000000..776a4b14e0a5d78ef183c1c012d7ffcae8b59876
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/CraftEntityActivity.java
@@ -0,0 +1,33 @@
+package org.bukkit.craftbukkit;
+
+import net.minecraft.core.registries.Registries;
+import org.bukkit.EntityActivity;
+import net.minecraft.world.entity.schedule.Activity;
+import org.bukkit.NamespacedKey;
+import org.bukkit.PoiType;
+import org.bukkit.Registry;
+import org.jetbrains.annotations.NotNull;
+
+public class CraftEntityActivity extends BukkitToNMSMapping<Activity> implements EntityActivity {
+    public static EntityActivity minecraftToBukkit(Activity minecraft) {
+        return minecraftToBukkit(minecraft, Registries.ACTIVITY, Registry.ENTITY_ACTIVITY);
+    }
+
+    public static Activity bukkitToMinecraft(EntityActivity bukkit) {
+        return bukkitToMinecraft(bukkit, Registries.ACTIVITY);
+    }
+
+    public CraftEntityActivity(NamespacedKey key, Activity handle) {
+        super(key, handle);
+    }
+
+    @Override
+    public @NotNull String translationKey() {
+        return "activity.minecraft." + getKey().getKey();
+    }
+
+    @Override
+    public String toString() {
+        return "CraftEntityActivity{key=" + this.getKey() + "}";
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftEntitySchedule.java b/src/main/java/org/bukkit/craftbukkit/CraftEntitySchedule.java
new file mode 100644
index 0000000000000000000000000000000000000000..aed77f45b42aeff11e38c87226c2ac198c86d837
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/CraftEntitySchedule.java
@@ -0,0 +1,34 @@
+package org.bukkit.craftbukkit;
+
+import net.minecraft.core.registries.Registries;
+import net.minecraft.world.entity.schedule.Activity;
+import net.minecraft.world.entity.schedule.Schedule;
+import org.bukkit.EntityActivity;
+import org.bukkit.EntitySchedule;
+import org.bukkit.NamespacedKey;
+import org.bukkit.Registry;
+import org.jetbrains.annotations.NotNull;
+
+public class CraftEntitySchedule extends BukkitToNMSMapping<Schedule> implements EntitySchedule {
+    public static EntitySchedule minecraftToBukkit(Schedule minecraft) {
+        return minecraftToBukkit(minecraft, Registries.SCHEDULE, Registry.ENTITY_SCHEDULE);
+    }
+
+    public static Schedule bukkitToMinecraft(EntitySchedule bukkit) {
+        return bukkitToMinecraft(bukkit, Registries.SCHEDULE);
+    }
+
+    public CraftEntitySchedule(NamespacedKey key, Schedule handle) {
+        super(key, handle);
+    }
+
+    @Override
+    public @NotNull String translationKey() {
+        return "schedule.minecraft." + getKey().getKey();
+    }
+
+    @Override
+    public String toString() {
+        return "CraftEntitySchedule{key=" + this.getKey() + "}";
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftPoiType.java b/src/main/java/org/bukkit/craftbukkit/CraftPoiType.java
new file mode 100644
index 0000000000000000000000000000000000000000..5c6d277657dcc5aa7a03cceb87124fa8dfcc24c0
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/CraftPoiType.java
@@ -0,0 +1,31 @@
+package org.bukkit.craftbukkit;
+
+import net.minecraft.core.registries.Registries;
+import org.bukkit.NamespacedKey;
+import org.bukkit.PoiType;
+import org.bukkit.Registry;
+import org.jetbrains.annotations.NotNull;
+
+public class CraftPoiType extends BukkitToNMSMapping<net.minecraft.world.entity.ai.village.poi.PoiType> implements PoiType {
+    public static PoiType minecraftToBukkit(net.minecraft.world.entity.ai.village.poi.PoiType minecraft) {
+        return minecraftToBukkit(minecraft, Registries.POINT_OF_INTEREST_TYPE, Registry.POI_TYPE);
+    }
+
+    public static net.minecraft.world.entity.ai.village.poi.PoiType bukkitToMinecraft(PoiType bukkit) {
+        return bukkitToMinecraft(bukkit, Registries.POINT_OF_INTEREST_TYPE);
+    }
+
+    public CraftPoiType(NamespacedKey key, net.minecraft.world.entity.ai.village.poi.PoiType handle) {
+        super(key, handle);
+    }
+
+    @Override
+    public @NotNull String translationKey() {
+        return "poitype.minecraft."+this.getKey().getKey();
+    }
+
+    @Override
+    public String toString() {
+        return "CraftPoiType{key=" + this.getKey() + "}";
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftRegistry.java b/src/main/java/org/bukkit/craftbukkit/CraftRegistry.java
index 53c70846666b746af6706ed2e363fe388e463e56..d40ca67a69b155079f777a6263dc7723ae92c7b9 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftRegistry.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftRegistry.java
@@ -154,10 +154,6 @@ public class CraftRegistry<B extends Keyed, M> implements Registry<B> {
             if (bClass == Particle.class) {
                 return bukkit.get(FieldRename.PARTICLE_TYPE_RENAME.apply(namespacedKey, apiVersion));
             }
-
-            if (bClass == Attribute.class) {
-                return bukkit.get(FieldRename.ATTRIBUTE_RENAME.apply(namespacedKey, apiVersion));
-            }
         }
 
         return bukkit.get(namespacedKey);
diff --git a/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttribute.java b/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttribute.java
index 10e4318782107644f67818109784fff60d017e0a..d1a0d654ef7677f1e63726ad38164dec4bd25d66 100644
--- a/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttribute.java
+++ b/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttribute.java
@@ -12,17 +12,9 @@ import org.bukkit.craftbukkit.legacy.FieldRename;
 import org.bukkit.craftbukkit.util.ApiVersion;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 
-public class CraftAttribute {
-
+public class CraftAttribute extends Attribute implements org.bukkit.craftbukkit.util.Handleable<net.minecraft.world.entity.ai.attributes.Attribute> {
     public static Attribute minecraftToBukkit(net.minecraft.world.entity.ai.attributes.Attribute minecraft) {
-        Preconditions.checkArgument(minecraft != null);
-
-        net.minecraft.core.Registry<net.minecraft.world.entity.ai.attributes.Attribute> registry = CraftRegistry.getMinecraftRegistry(Registries.ATTRIBUTE);
-        Attribute bukkit = Registry.ATTRIBUTE.get(CraftNamespacedKey.fromMinecraft(registry.getResourceKey(minecraft).orElseThrow().location()));
-
-        Preconditions.checkArgument(bukkit != null);
-
-        return bukkit;
+        return CraftRegistry.minecraftToBukkit(minecraft, Registries.ATTRIBUTE, Registry.ATTRIBUTE);
     }
 
     public static Attribute minecraftHolderToBukkit(Holder<net.minecraft.world.entity.ai.attributes.Attribute> minecraft) {
@@ -31,23 +23,11 @@ public class CraftAttribute {
 
     public static Attribute stringToBukkit(String string) {
         Preconditions.checkArgument(string != null);
-
-        // We currently do not have any version-dependent remapping, so we can use current version
-        // First convert from when only the names where saved
-        string = FieldRename.convertAttributeName(ApiVersion.CURRENT, string);
-        string = string.toLowerCase(Locale.ROOT);
-        NamespacedKey key = NamespacedKey.fromString(string);
-        if (key == null) return null; // Paper - Fixup NamespacedKey handling
-
-        // Now also convert from when keys where saved
-        return CraftRegistry.get(Registry.ATTRIBUTE, key, ApiVersion.CURRENT);
+        return Registry.ATTRIBUTE.get(NamespacedKey.fromString(string));
     }
 
     public static net.minecraft.world.entity.ai.attributes.Attribute bukkitToMinecraft(Attribute bukkit) {
-        Preconditions.checkArgument(bukkit != null);
-
-        return CraftRegistry.getMinecraftRegistry(Registries.ATTRIBUTE)
-                .getOptional(CraftNamespacedKey.toMinecraft(bukkit.getKey())).orElseThrow();
+        return CraftRegistry.bukkitToMinecraft(bukkit);
     }
 
     public static Holder<net.minecraft.world.entity.ai.attributes.Attribute> bukkitToMinecraftHolder(Attribute bukkit) {
@@ -68,4 +48,22 @@ public class CraftAttribute {
 
         return bukkit.getKey().toString();
     }
+
+    private final NamespacedKey key;
+    private final net.minecraft.world.entity.ai.attributes.Attribute handle;
+
+    public CraftAttribute(NamespacedKey key, net.minecraft.world.entity.ai.attributes.Attribute handle) {
+        this.key = key;
+        this.handle = handle;
+    }
+
+    @Override
+    public @org.jetbrains.annotations.NotNull NamespacedKey getKey() {
+        return key;
+    }
+
+    @Override
+    public net.minecraft.world.entity.ai.attributes.Attribute getHandle() {
+        return handle;
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index 60ec9b228518de0521b12f3f4ef26cb30260315a..72a099fbca2bcfa3bb4bb4b48dd65605411a7b37 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -825,7 +825,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
                     continue;
                 }
                 AttributeModifier modifier = (AttributeModifier) o;
-                Attribute attribute = CraftAttribute.stringToBukkit(attributeName);
+                Attribute attribute = Attribute.getAttribute(org.bukkit.NamespacedKey.minecraft(attributeName.toUpperCase(Locale.ROOT))); // MCCLab
                 if (attribute == null) {
                     continue;
                 }
@@ -2020,7 +2020,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
             if (modCollection == null || modCollection.isEmpty()) {
                 continue;
             }
-            mods.put(CraftAttribute.bukkitToString(entry.getKey()), new ArrayList<>(modCollection));
+            mods.put(entry.getKey().getKey().getKey().replace(".", "_"), new ArrayList<>(modCollection)); // MCCLab
         }
         builder.put(key.BUKKIT, mods);
     }
diff --git a/src/test/java/org/bukkit/support/provider/RegistriesArgumentProvider.java b/src/test/java/org/bukkit/support/provider/RegistriesArgumentProvider.java
index f4ba15a1b4b43822bd81b513af56c6667237c327..3092a1b5499de898b0eceaa73c1a406504679d0e 100644
--- a/src/test/java/org/bukkit/support/provider/RegistriesArgumentProvider.java
+++ b/src/test/java/org/bukkit/support/provider/RegistriesArgumentProvider.java
@@ -12,17 +12,25 @@ import net.minecraft.world.entity.animal.FrogVariant;
 import net.minecraft.world.entity.animal.WolfVariant;
 import net.minecraft.world.entity.npc.VillagerProfession;
 import net.minecraft.world.entity.npc.VillagerType;
+import net.minecraft.world.entity.schedule.Activity;
+import net.minecraft.world.entity.schedule.Schedule;
 import net.minecraft.world.item.Instrument;
 import net.minecraft.world.level.block.entity.BannerPattern;
 import net.minecraft.world.level.saveddata.maps.MapDecorationType;
 import org.bukkit.GameEvent;
 import org.bukkit.JukeboxSong;
 import org.bukkit.MusicInstrument;
+import org.bukkit.*;
+import org.bukkit.attribute.Attribute;
+import org.bukkit.block.Biome;
 import org.bukkit.block.BlockType;
 import org.bukkit.block.banner.PatternType;
 import org.bukkit.craftbukkit.CraftGameEvent;
 import org.bukkit.craftbukkit.CraftJukeboxSong;
 import org.bukkit.craftbukkit.CraftMusicInstrument;
+import org.bukkit.craftbukkit.*;
+import org.bukkit.craftbukkit.attribute.CraftAttribute;
+import org.bukkit.craftbukkit.block.CraftBiome;
 import org.bukkit.craftbukkit.block.CraftBlockType;
 import org.bukkit.craftbukkit.block.banner.CraftPatternType;
 import org.bukkit.craftbukkit.damage.CraftDamageType;
@@ -83,6 +91,11 @@ public class RegistriesArgumentProvider implements ArgumentsProvider {
         register(RegistryKey.MAP_DECORATION_TYPE, MapCursor.Type.class, Registries.MAP_DECORATION_TYPE, CraftMapCursor.CraftType.class, MapDecorationType.class);
         register(RegistryKey.BANNER_PATTERN, PatternType.class, Registries.BANNER_PATTERN, CraftPatternType.class, BannerPattern.class);
         register(RegistryKey.MENU, MenuType.class, Registries.MENU, CraftMenuType.class, net.minecraft.world.inventory.MenuType.class);
+
+        register(RegistryKey.ATTRIBUTE, Attribute.class, Registries.ATTRIBUTE, CraftAttribute.class, net.minecraft.world.entity.ai.attributes.Attribute.class);
+        register(RegistryKey.POI_TYPE, PoiType.class, Registries.POINT_OF_INTEREST_TYPE, CraftPoiType.class, net.minecraft.world.entity.ai.village.poi.PoiType.class);
+        register(RegistryKey.ENTITY_ACTIVITY, EntityActivity.class, Registries.ACTIVITY, CraftEntityActivity.class, Activity.class);
+        register(RegistryKey.ENTITY_SCHEDULE, EntitySchedule.class, Registries.SCHEDULE, CraftEntitySchedule.class, Schedule.class);
     }
 
     private static void register(RegistryKey registryKey, Class bukkit, ResourceKey registry, Class craft, Class minecraft) { // Paper
