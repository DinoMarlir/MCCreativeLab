From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: derverdox <mail.ysp@web.de>
Date: Sun, 7 Jan 2024 02:08:39 +0100
Subject: [PATCH] Adding Player Fake Inventory sending


diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index ce84b7ae3db78999454cca757a22542938fa2f17..c458fb393316fb11e3f28a375190d335012b2c03 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -333,6 +333,7 @@ public class ServerPlayer extends net.minecraft.world.entity.player.Player imple
     }
     // Paper end - rewrite chunk system
 
+    public boolean pauseInventorySynchronization; // MCCLab - Pause Inventory Synchronization
     public ServerPlayer(MinecraftServer server, ServerLevel world, GameProfile profile, ClientInformation clientOptions) {
         super(world, world.getSharedSpawnPos(), world.getSharedSpawnAngle(), profile);
         this.chatVisibility = ChatVisiblity.FULL;
@@ -349,7 +350,9 @@ public class ServerPlayer extends net.minecraft.world.entity.player.Player imple
         this.containerSynchronizer = new ContainerSynchronizer() {
             @Override
             public void sendInitialData(AbstractContainerMenu handler, NonNullList<ItemStack> stacks, ItemStack cursorStack, int[] properties) {
-                ServerPlayer.this.connection.send(new ClientboundContainerSetContentPacket(handler.containerId, handler.incrementStateId(), stacks, cursorStack));
+                handler.incrementStateId();
+                if(pauseInventorySynchronization) return;
+                ServerPlayer.this.connection.send(new ClientboundContainerSetContentPacket(handler.containerId, handler.getStateId(), stacks, cursorStack));
 
                 for (int i = 0; i < properties.length; ++i) {
                     this.broadcastDataValue(handler, i, properties[i]);
@@ -360,26 +363,34 @@ public class ServerPlayer extends net.minecraft.world.entity.player.Player imple
             // Paper start - Sync offhand slot in menus
             @Override
             public void sendOffHandSlotChange() {
-                ServerPlayer.this.connection.send(new ClientboundContainerSetSlotPacket(ServerPlayer.this.inventoryMenu.containerId, ServerPlayer.this.inventoryMenu.incrementStateId(), net.minecraft.world.inventory.InventoryMenu.SHIELD_SLOT, ServerPlayer.this.inventoryMenu.getSlot(net.minecraft.world.inventory.InventoryMenu.SHIELD_SLOT).getItem().copy()));
+                ServerPlayer.this.inventoryMenu.incrementStateId();
+                if(pauseInventorySynchronization) return;
+                ServerPlayer.this.connection.send(new ClientboundContainerSetSlotPacket(ServerPlayer.this.inventoryMenu.containerId, ServerPlayer.this.inventoryMenu.getStateId(), net.minecraft.world.inventory.InventoryMenu.SHIELD_SLOT, ServerPlayer.this.inventoryMenu.getSlot(net.minecraft.world.inventory.InventoryMenu.SHIELD_SLOT).getItem().copy()));
             }
             // Paper end - Sync offhand slot in menus
 
             @Override
             public void sendSlotChange(AbstractContainerMenu handler, int slot, ItemStack stack) {
-                ServerPlayer.this.connection.send(new ClientboundContainerSetSlotPacket(handler.containerId, handler.incrementStateId(), slot, stack));
+                handler.incrementStateId();
+                if(pauseInventorySynchronization) return;
+                ServerPlayer.this.connection.send(new ClientboundContainerSetSlotPacket(handler.containerId, handler.getStateId(), slot, stack));
             }
 
             @Override
             public void sendCarriedChange(AbstractContainerMenu handler, ItemStack stack) {
-                ServerPlayer.this.connection.send(new ClientboundContainerSetSlotPacket(-1, handler.incrementStateId(), -1, stack));
+                handler.incrementStateId();
+                if(pauseInventorySynchronization) return;
+                ServerPlayer.this.connection.send(new ClientboundContainerSetSlotPacket(-1, handler.getStateId(), -1, stack));
             }
 
             @Override
             public void sendDataChange(AbstractContainerMenu handler, int property, int value) {
+                if(pauseInventorySynchronization) return; // MCCLab - Pause Inventory Synchronization
                 this.broadcastDataValue(handler, property, value);
             }
 
             private void broadcastDataValue(AbstractContainerMenu handler, int property, int value) {
+                if(pauseInventorySynchronization) return; // MCCLab - Pause Inventory Synchronization
                 ServerPlayer.this.connection.send(new ClientboundContainerSetDataPacket(handler.containerId, property, value));
             }
         };
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 992437a6e838f653f32d33b5b3f702c484640a97..ea53058123938d96ad66a7595724c80d5cf7f43d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -929,6 +929,31 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         this.getHandle().connection.send(packet);
     }
 
+    //MCCLab start - Add inventory sync flag and fake inventory sending
+    @Override
+    public void doInventorySynchronization(boolean value) {
+        getHandle().pauseInventorySynchronization = !value;
+    }
+
+    @Override
+    public void sendFakeInventoryContents(ItemStack[] contents) {
+        net.minecraft.core.NonNullList<net.minecraft.world.item.ItemStack> stacks = net.minecraft.core.NonNullList.create();
+        for (int i = 0; i < contents.length; i++) {
+            ItemStack bukkitStack = contents[i];
+            if(bukkitStack != null)
+                stacks.add(i, CraftItemStack.asNMSCopy(bukkitStack));
+            else
+                stacks.add(i, net.minecraft.world.item.ItemStack.EMPTY);
+        }
+
+        this.getHandle().connection.send(new net.minecraft.network.protocol.game.ClientboundContainerSetContentPacket(this.getHandle().containerMenu.containerId, this.getHandle().containerMenu.getStateId(), stacks, this.getHandle().containerMenu.getCarried().copy()));
+    }
+
+    @Override
+    public boolean isInventorySynchronization() {
+        return !getHandle().pauseInventorySynchronization;
+    }
+    //MCCLab end - Add inventory sync flag and fake inventory sending
     @Override
     public <T> void playEffect(Location loc, Effect effect, T data) {
         Preconditions.checkArgument(effect != null, "Effect cannot be null");
@@ -1539,6 +1564,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     @Deprecated
     @Override
     public void updateInventory() {
+        doInventorySynchronization(true); // MCCLab - Pause Inventory Synchronization
         this.getHandle().containerMenu.sendAllDataToRemote();
     }
 
