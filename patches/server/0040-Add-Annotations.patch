From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: verdox <mail.ysp@web.de>
Date: Mon, 21 Oct 2024 20:32:51 +0000
Subject: [PATCH] Add Annotations


diff --git a/src/main/java/de/verdox/mccreativelab/CraftDataPackInterceptor.java b/src/main/java/de/verdox/mccreativelab/CraftDataPackInterceptor.java
index d7567e4881a909779fd1e852896288fe5cbadd50..d025ad94245b434bfff7e0308a7124fd866ba31f 100644
--- a/src/main/java/de/verdox/mccreativelab/CraftDataPackInterceptor.java
+++ b/src/main/java/de/verdox/mccreativelab/CraftDataPackInterceptor.java
@@ -13,6 +13,7 @@ import java.nio.file.Path;
 import java.util.*;
 import java.util.function.Consumer;
 import org.apache.commons.io.FilenameUtils;
+import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 import java.nio.charset.StandardCharsets;
 import java.util.function.Function;
@@ -27,38 +28,38 @@ public class CraftDataPackInterceptor implements DataPackInterceptor {
     private Consumer<DataPackAsset> installCallback;
 
     @Override
-    public DataPackInterceptor exclude(String pathContains) {
+    public @NotNull DataPackInterceptor exclude(@NotNull String pathContains) {
         stringPatternExcludes.add(pathContains);
         return this;
     }
 
     @Override
-    public DataPackInterceptor exclude(PackAssetType packAssetType) {
+    public @NotNull DataPackInterceptor exclude(@NotNull PackAssetType packAssetType) {
         excludedTypes.add(packAssetType);
         return this;
     }
 
     @Override
-    public DataPackInterceptor modify(PackAssetType packAssetType, Key key, Function<DataPackAsset, Boolean> consumer) {
+    public @NotNull DataPackInterceptor modify(@NotNull PackAssetType packAssetType, @NotNull Key key, @NotNull Function<DataPackAsset, Boolean> consumer) {
         modifies.computeIfAbsent(packAssetType, packAssetType1 -> new HashMap<>()).computeIfAbsent(key, key1 -> new LinkedList<>()).add(consumer);
         return this;
     }
 
     @Override
-    public DataPackInterceptor modify(Function<DataPackAsset, Boolean> modifier) {
+    public @NotNull DataPackInterceptor modify(@NotNull Function<DataPackAsset, Boolean> modifier) {
         globalModifiers.add(modifier);
         return this;
     }
 
 
     @Override
-    public DataPackInterceptor exclude(PackAssetType packAssetType, Key key) {
+    public @NotNull DataPackInterceptor exclude(@NotNull PackAssetType packAssetType, @NotNull Key key) {
         exclusions.computeIfAbsent(packAssetType, packAssetType1 -> new HashSet<>()).add(key);
         return this;
     }
 
     @Override
-    public DataPackInterceptor onInstall(Consumer<DataPackAsset> installCallback) {
+    public @NotNull DataPackInterceptor onInstall(@NotNull Consumer<DataPackAsset> installCallback) {
         this.installCallback = installCallback;
         return this;
     }
diff --git a/src/main/java/de/verdox/mccreativelab/ai/builder/CraftGoalFactory.java b/src/main/java/de/verdox/mccreativelab/ai/builder/CraftGoalFactory.java
index 02a0d609e0fcd963fbb94f67f086cfb3e5756953..04cf1a86b6a7b8eade38ebeb10c3920466b372cb 100644
--- a/src/main/java/de/verdox/mccreativelab/ai/builder/CraftGoalFactory.java
+++ b/src/main/java/de/verdox/mccreativelab/ai/builder/CraftGoalFactory.java
@@ -168,7 +168,7 @@ public class CraftGoalFactory implements GoalFactory {
     }
 
     @Override
-    public @NotNull VanillaGoal<Mob> moveThroughVillage(@NotNull Mob mob, double speed, boolean requiresNighttime, int distance, BooleanSupplier doorPassingThroughGetter) {
+    public @NotNull VanillaGoal<Mob> moveThroughVillage(@NotNull Mob mob, double speed, boolean requiresNighttime, int distance, @NotNull BooleanSupplier doorPassingThroughGetter) {
         return asGoal(new MoveThroughVillageGoal(toNms(mob), speed, requiresNighttime, distance, doorPassingThroughGetter));
     }
 
diff --git a/src/main/java/de/verdox/mccreativelab/ai/builder/CraftWeightedBehaviorsBuilder.java b/src/main/java/de/verdox/mccreativelab/ai/builder/CraftWeightedBehaviorsBuilder.java
index a4ecfb6a7699e62603e2a1984b2e3276f9bdf4b2..60a7e80cef4d83fb68c9a39cda4ed3274cc34f58 100644
--- a/src/main/java/de/verdox/mccreativelab/ai/builder/CraftWeightedBehaviorsBuilder.java
+++ b/src/main/java/de/verdox/mccreativelab/ai/builder/CraftWeightedBehaviorsBuilder.java
@@ -6,6 +6,7 @@ import net.minecraft.world.entity.ai.behavior.Behavior;
 import net.minecraft.world.entity.ai.behavior.BehaviorControl;
 import org.bukkit.Bukkit;
 import org.bukkit.entity.LivingEntity;
+import org.jetbrains.annotations.NotNull;
 
 import java.util.LinkedList;
 import java.util.List;
@@ -14,7 +15,7 @@ import java.util.function.Function;
 public class CraftWeightedBehaviorsBuilder<E extends LivingEntity> implements WeightedBehaviorsBuilder<E> {
     public final List<Pair<Integer, BehaviorControl<? extends net.minecraft.world.entity.LivingEntity>>> behaviours = new LinkedList<>();
     @Override
-    public WeightedBehaviorsBuilder<E> withBehaviour(int priority, ControlledBehavior<? super E> aiBehavior) {
+    public @NotNull WeightedBehaviorsBuilder<E> withBehaviour(int priority, @NotNull ControlledBehavior<? super E> aiBehavior) {
         if (aiBehavior instanceof CustomAIBehavior<?> customAiBehaviour1)
             return withBehaviour(priority, (CustomAIBehavior<E>) customAiBehaviour1);
         else if (aiBehavior instanceof OneShotBehavior<?> oneShotBehavior)
@@ -29,7 +30,7 @@ public class CraftWeightedBehaviorsBuilder<E extends LivingEntity> implements We
     }
 
     @Override
-    public WeightedBehaviorsBuilder<E> withBehaviour(int priority, AIBehavior<? super E> customAiBehavior) {
+    public @NotNull WeightedBehaviorsBuilder<E> withBehaviour(int priority, @NotNull AIBehavior<? super E> customAiBehavior) {
         if (customAiBehavior instanceof CraftAIBehavior<?> craftAIBehavior)
             this.behaviours.add(Pair.of(priority, craftAIBehavior.getHandle()));
         else
@@ -38,14 +39,14 @@ public class CraftWeightedBehaviorsBuilder<E extends LivingEntity> implements We
     }
 
     @Override
-    public WeightedBehaviorsBuilder<E> withBehaviour(int priority, CustomAIBehavior<? super E> customAiBehaviour) {
+    public @NotNull WeightedBehaviorsBuilder<E> withBehaviour(int priority, @NotNull CustomAIBehavior<? super E> customAiBehaviour) {
         Behavior<net.minecraft.world.entity.LivingEntity> behavior = new WrappedPaperAIBehavior<>(customAiBehaviour);
         this.behaviours.add(Pair.of(priority, behavior));
         return this;
     }
 
     @Override
-    public WeightedBehaviorsBuilder<E> withBehaviour(int priority, OneShotBehavior<? super E> aiBehavior) {
+    public @NotNull WeightedBehaviorsBuilder<E> withBehaviour(int priority, @NotNull OneShotBehavior<? super E> aiBehavior) {
         if (aiBehavior instanceof CraftOneShotBehavior<?> craftOneShotBehaviour)
             this.behaviours.add(Pair.of(priority, craftOneShotBehaviour.getHandle()));
         else
@@ -54,7 +55,7 @@ public class CraftWeightedBehaviorsBuilder<E extends LivingEntity> implements We
     }
 
     @Override
-    public WeightedBehaviorsBuilder<E> withBehaviour(int priority, Function<BehaviorFactory, ControlledBehavior<? super E>> behaviourCreator) {
+    public @NotNull WeightedBehaviorsBuilder<E> withBehaviour(int priority, @NotNull Function<BehaviorFactory, ControlledBehavior<? super E>> behaviourCreator) {
         return withBehaviour(priority, behaviourCreator.apply(Bukkit.getAIFactory().getBehaviorFactory()));
     }
 }
diff --git a/src/main/java/de/verdox/mccreativelab/data/CraftVanillaRegistryManipulator.java b/src/main/java/de/verdox/mccreativelab/data/CraftVanillaRegistryManipulator.java
index bcf9a9c2a596830f8f71532808227285b509dcd1..ce3cb026441c1c9d758510df9a633ca405db481b 100644
--- a/src/main/java/de/verdox/mccreativelab/data/CraftVanillaRegistryManipulator.java
+++ b/src/main/java/de/verdox/mccreativelab/data/CraftVanillaRegistryManipulator.java
@@ -27,6 +27,7 @@ import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.entity.Villager;
 import org.bukkit.entity.memory.MemoryKey;
+import org.jetbrains.annotations.NotNull;
 
 import javax.annotation.Nullable;
 import java.util.LinkedList;
@@ -40,7 +41,7 @@ public class CraftVanillaRegistryManipulator implements VanillaRegistryManipulat
     public static List<Runnable> CUSTOM_BOOTSTRAPPERS = new LinkedList<>();
 
     @Override
-    public RegistryEntryReference<Attribute> createAttribute(NamespacedKey namespacedKey, double defaultValue, double min, double max) {
+    public @NotNull RegistryEntryReference<Attribute> createAttribute(@NotNull NamespacedKey namespacedKey, double defaultValue, double min, double max) {
         if (namespacedKey.namespace().equals(NamespacedKey.MINECRAFT_NAMESPACE))
             throw new IllegalStateException("Cannot create attributes in minecraft namespace");
         CUSTOM_BOOTSTRAPPERS.add(() -> {
@@ -53,7 +54,7 @@ public class CraftVanillaRegistryManipulator implements VanillaRegistryManipulat
     }
 
     @Override
-    public <T> RegistryEntryReference<MemoryKey<T>> createMemoryKey(NamespacedKey namespacedKey, Class<? extends T> storedType) {
+    public <T> @NotNull RegistryEntryReference<MemoryKey<T>> createMemoryKey(@NotNull NamespacedKey namespacedKey, @NotNull Class<? extends T> storedType) {
         if (namespacedKey.namespace().equals(NamespacedKey.MINECRAFT_NAMESPACE))
             throw new IllegalStateException("Cannot create MemoryKeys in minecraft namespace");
         CUSTOM_BOOTSTRAPPERS.add(() -> {
@@ -64,7 +65,7 @@ public class CraftVanillaRegistryManipulator implements VanillaRegistryManipulat
     }
 
     @Override
-    public RegistryEntryReference<PoiType> createPoiType(NamespacedKey namespacedKey, Set<BlockData> states, int ticketCount, int searchDistance) {
+    public @NotNull RegistryEntryReference<PoiType> createPoiType(@NotNull NamespacedKey namespacedKey, @NotNull Set<BlockData> states, int ticketCount, int searchDistance) {
         if (namespacedKey.namespace().equals(NamespacedKey.MINECRAFT_NAMESPACE))
             throw new IllegalStateException("Cannot create PoiTypes in minecraft namespace");
         CUSTOM_BOOTSTRAPPERS.add(() -> {
@@ -79,7 +80,7 @@ public class CraftVanillaRegistryManipulator implements VanillaRegistryManipulat
     }
 
     @Override
-    public RegistryEntryReference<Villager.Profession> createProfession(NamespacedKey namespacedKey, Predicate<PoiType> heldWorkStation, Predicate<PoiType> acquirableWorkstation, Set<Material> gatherableItems, Set<Material> secondaryJobSites, Sound.Type workSound) {
+    public @NotNull RegistryEntryReference<Villager.Profession> createProfession(@NotNull NamespacedKey namespacedKey, @NotNull Predicate<PoiType> heldWorkStation, @NotNull Predicate<PoiType> acquirableWorkstation, @NotNull Set<Material> gatherableItems, @NotNull Set<Material> secondaryJobSites, Sound.@NotNull Type workSound) {
         if (namespacedKey.namespace().equals(NamespacedKey.MINECRAFT_NAMESPACE))
             throw new IllegalStateException("Cannot create VillagerProfessions in minecraft namespace");
         CUSTOM_BOOTSTRAPPERS.add(() -> {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index e86b12e23163163c7410fd3e5691fdf47cf0876d..ecad1bac9130cd3136c5fe5f3321ea86b819c218 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -59,6 +59,7 @@ import org.bukkit.util.NumberConversions;
 import org.bukkit.util.Vector;
 
 import net.md_5.bungee.api.chat.BaseComponent; // Spigot
+import org.jetbrains.annotations.NotNull;
 
 public abstract class CraftEntity implements org.bukkit.entity.Entity {
     private static PermissibleBase perm;
@@ -314,7 +315,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
     // MCCreativeLab start - Add EntityBehaviour
     @Override
-    public <T extends org.bukkit.entity.Entity, B extends de.verdox.mccreativelab.behaviour.entity.EntityBehaviour<T>> void setCustomEntityBehaviour(Class<? extends T> entityTypeClass, B behaviour) {
+    public <T extends org.bukkit.entity.Entity, B extends de.verdox.mccreativelab.behaviour.entity.EntityBehaviour<T>> void setCustomEntityBehaviour(@NotNull Class<? extends T> entityTypeClass, B behaviour) {
         if(!entityTypeClass.isAssignableFrom(getClass()))
             throw new IllegalArgumentException(getClass().getName()+" is not of type "+entityTypeClass.getClass().getName());
         getHandle().behaviour = behaviour;
@@ -328,7 +329,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
     @Override
     @org.jetbrains.annotations.Nullable
-    public <T extends org.bukkit.entity.Entity, B extends de.verdox.mccreativelab.behaviour.entity.EntityBehaviour<T>> B getCustomEntityBehaviour(Class<? extends B> behaviourType) {
+    public <T extends org.bukkit.entity.Entity, B extends de.verdox.mccreativelab.behaviour.entity.EntityBehaviour<T>> B getCustomEntityBehaviour(@NotNull Class<? extends B> behaviourType) {
         if(!hasCustomEntityBehaviour())
             return null;
         if(!behaviourType.isAssignableFrom(getHandle().behaviour.getClass()))
@@ -337,7 +338,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     }
 
     @Override
-    public <T extends org.bukkit.entity.Entity, B extends de.verdox.mccreativelab.behaviour.entity.EntityBehaviour<T>> B getCustomEntityBehaviourIfAvailable(Class<? extends B> behaviourType) {
+    public <T extends org.bukkit.entity.Entity, B extends de.verdox.mccreativelab.behaviour.entity.EntityBehaviour<T>> B getCustomEntityBehaviourIfAvailable(@NotNull Class<? extends B> behaviourType) {
         if(!hasCustomEntityBehaviour())
             return null;
         if(!behaviourType.isAssignableFrom(getHandle().behaviour.getClass()))
