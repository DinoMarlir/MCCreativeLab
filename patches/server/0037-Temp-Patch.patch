From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: verdox <mail.ysp@web.de>
Date: Wed, 29 May 2024 15:23:38 +0000
Subject: [PATCH] Temp Patch


diff --git a/src/main/java/de/verdox/mccreativelab/CreativeLabImpl.java b/src/main/java/de/verdox/mccreativelab/CreativeLabImpl.java
index 287c9fd46016a33379acae37c842b638bf06ce94..628b2ce2b803fe23b3b33fd62a77866dd6b2135f 100644
--- a/src/main/java/de/verdox/mccreativelab/CreativeLabImpl.java
+++ b/src/main/java/de/verdox/mccreativelab/CreativeLabImpl.java
@@ -1,7 +1,26 @@
 package de.verdox.mccreativelab;
 
+import com.google.common.base.Supplier;
+import de.verdox.mccreativelab.behaviour.BehaviourUtil;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.item.context.BlockPlaceContext;
+import net.minecraft.world.phys.BlockHitResult;
+import net.minecraft.world.phys.Vec3;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.NamespacedKey;
+import org.bukkit.WorldCreator;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.persistence.PersistentDataContainer;
+import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Objects;
+import java.util.concurrent.CompletableFuture;
+
 public final class CreativeLabImpl implements CreativeLab {
 
     private final de.verdox.mccreativelab.data.DataPackInterceptor dataPackInterceptor = new CraftDataPackInterceptor();
@@ -31,4 +50,20 @@ public final class CreativeLabImpl implements CreativeLab {
     public de.verdox.mccreativelab.advancement.AdvancementBuilder createAdvancement() {
         return new de.verdox.mccreativelab.advancement.CraftAdvancementBuilder();
     }
+
+    @Override
+    public org.bukkit.inventory.Inventory openCustomContainerMenu(@NotNull de.verdox.mccreativelab.container.CustomInventory customInventory, @NotNull org.bukkit.entity.Player player, @NotNull net.kyori.adventure.text.Component title) {
+        return de.verdox.mccreativelab.container.CustomContainerMenu.openToPlayer(customInventory, player, title);
+    }
+
+    @Override
+    public InteractionResult placeBlockFromItemWithoutPlayer(ItemStack stack, Location location) {
+        if (!(org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(stack).getItem() instanceof net.minecraft.world.item.BlockItem blockItem))
+            throw new IllegalArgumentException();
+
+        net.minecraft.world.level.Level level = ((org.bukkit.craftbukkit.CraftWorld) location.getWorld()).getHandle();
+        BlockHitResult blockHitResult = new BlockHitResult(new Vec3(location.getBlockX(), location.getBlockY(), location.getBlockZ()), Direction.UP, new BlockPos(location.getBlockX(), location.getBlockY(), location.getBlockZ()), true);
+
+        return BehaviourUtil.Converter.InteractionResult.INSTANCE.nmsToBukkitValue(blockItem.placeItemWithoutPlayer(new BlockPlaceContext(level, null, InteractionHand.MAIN_HAND, org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(stack), blockHitResult)));
+    }
 }
diff --git a/src/main/java/de/verdox/mccreativelab/container/CustomContainerMenu.java b/src/main/java/de/verdox/mccreativelab/container/CustomContainerMenu.java
new file mode 100644
index 0000000000000000000000000000000000000000..e723abdde093a582bac403692f77893130718590
--- /dev/null
+++ b/src/main/java/de/verdox/mccreativelab/container/CustomContainerMenu.java
@@ -0,0 +1,175 @@
+package de.verdox.mccreativelab.container;
+
+import io.papermc.paper.adventure.PaperAdventure;
+import net.minecraft.network.chat.Component;
+import net.minecraft.world.CompoundContainer;
+import net.minecraft.world.Container;
+import net.minecraft.world.MenuProvider;
+import net.minecraft.world.SimpleContainer;
+import net.minecraft.world.entity.player.Inventory;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.inventory.AbstractContainerMenu;
+import net.minecraft.world.inventory.MenuType;
+import net.minecraft.world.inventory.Slot;
+import net.minecraft.world.item.ItemStack;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.inventory.CraftInventory;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Objects;
+
+public class CustomContainerMenu extends AbstractContainerMenu {
+
+    public static org.bukkit.inventory.Inventory openToPlayer(@NotNull CustomInventory customInventory, @NotNull org.bukkit.entity.Player player, @NotNull net.kyori.adventure.text.Component title) {
+        Objects.requireNonNull(customInventory, "customInventory cannot be null");
+        Objects.requireNonNull(player, "player cannot be null");
+        Objects.requireNonNull(title, "title cannot be null");
+
+        Container container = new SimpleContainer(9 * 6);
+
+        ((CraftPlayer) player).getHandle().openMenu(new MenuProvider() {
+            @Override
+            public @NotNull Component getDisplayName() {
+                return PaperAdventure.asVanilla(title);
+            }
+
+            @Override
+            public @NotNull AbstractContainerMenu createMenu(int syncId, @NotNull Inventory playerInventory, @NotNull Player player) {
+                return new CustomContainerMenu(customInventory, syncId, playerInventory, container);
+            }
+        });
+        return new CraftInventory(container);
+    }
+
+
+    private CraftInventoryView bukkitEntity = null;
+
+    public CraftInventoryView getBukkitView() {
+        if (this.bukkitEntity != null) {
+            return this.bukkitEntity;
+        }
+
+
+        CraftInventory inventory;
+        if (this.container instanceof Inventory) {
+            inventory = new org.bukkit.craftbukkit.inventory.CraftInventoryPlayer((Inventory) this.container);
+        } else if (this.container instanceof CompoundContainer) {
+            inventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest((CompoundContainer) this.container);
+        } else {
+            inventory = new CraftInventory(this.container);
+        }
+
+        this.bukkitEntity = new CraftInventoryView(this.playerInventory.player.getBukkitEntity(), inventory, this);
+        return this.bukkitEntity;
+    }
+
+
+    private final CustomInventory customInventory;
+    private final Inventory playerInventory;
+    private final Container container;
+
+    protected CustomContainerMenu(CustomInventory customInventory, int syncId, Inventory playerInventory, Container inventory) {
+        super(MenuType.GENERIC_9x6, syncId);
+        this.customInventory = customInventory;
+        this.playerInventory = playerInventory;
+        this.container = inventory;
+        inventory.startOpen(playerInventory.player);
+
+        CustomInventory.Slot[] slots = customInventory.getSlots();
+
+        for (int rowCount = 0; rowCount < 6; ++rowCount) {
+            for (int slotCount = 0; slotCount < 9; ++slotCount) {
+                int index = slotCount + rowCount * 9;
+                Slot slot;
+                if (index < slots.length)
+                    slot = new WrappedSlot(inventory, index, slots[index]);
+                else
+                    slot = new Slot(inventory, index, 8 + slotCount * 18, 18 + rowCount * 18);
+                this.addSlot(slot);
+            }
+        }
+
+        for (int l = 0; l < 3; ++l) {
+            for (int i1 = 0; i1 < 9; ++i1) {
+                this.addSlot(new Slot(playerInventory, i1 + l * 9 + 9, 0, 0));
+            }
+        }
+
+        for (int index = 0; index < 9; ++index) {
+            this.addSlot(new Slot(playerInventory, index, 0, 0));
+        }
+    }
+
+    @Override
+    public ItemStack quickMoveStack(Player player, int slot) {
+        return CraftItemStack.asNMSCopy(customInventory.quickMoveStack((org.bukkit.entity.Player) player.getBukkitEntity(), slot));
+    }
+
+    @Override
+    public boolean stillValid(Player player) {
+        if (!this.checkReachable) return true;
+        return this.container.stillValid(player);
+    }
+
+    @Override
+    public void removed(Player player) {
+        super.removed(player);
+        this.container.stopOpen(player);
+    }
+
+    public Container getContainer() {
+        return container;
+    }
+
+    public static class WrappedSlot extends Slot {
+        private final CustomInventory.Slot apiSlot;
+
+        public WrappedSlot(Container inventory, int index, CustomInventory.Slot apiSlot) {
+            // Indices are only used client side
+            super(inventory, index, 0, 0);
+            this.apiSlot = apiSlot;
+        }
+
+        @Override
+        protected void onQuickCraft(ItemStack stack, int amount) {
+            apiSlot.onQuickCraft(stack.asBukkitMirror(), amount);
+        }
+
+        @Override
+        protected void onSwapCraft(int amount) {
+            apiSlot.onSwapCraft(amount);
+        }
+
+        @Override
+        public void onTake(Player player, ItemStack stack) {
+            apiSlot.onTake((org.bukkit.entity.Player) player.getBukkitEntity(), stack.asBukkitMirror());
+        }
+
+        @Override
+        public boolean mayPlace(ItemStack stack) {
+            return apiSlot.mayPlace(stack.getBukkitStack());
+        }
+
+        @Override
+        public int getMaxStackSize() {
+            return apiSlot.getMaxStackSize();
+        }
+
+        @Override
+        public int getMaxStackSize(ItemStack stack) {
+            return apiSlot.getMaxStackSize(stack.asBukkitMirror());
+        }
+
+        @Override
+        public boolean isActive() {
+            return apiSlot.isActive();
+        }
+
+        @Override
+        public boolean mayPickup(Player player) {
+            return apiSlot.mayPickUp((org.bukkit.entity.Player) player.getBukkitEntity());
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/world/item/BlockItem.java b/src/main/java/net/minecraft/world/item/BlockItem.java
index 27ec050e920ef8be6944d7d0b32967c52f8a01e7..4a453dde16579bf4ee62fa66337b864ace7056ca 100644
--- a/src/main/java/net/minecraft/world/item/BlockItem.java
+++ b/src/main/java/net/minecraft/world/item/BlockItem.java
@@ -286,4 +286,62 @@ public class BlockItem extends Item {
     public FeatureFlagSet requiredFeatures() {
         return this.getBlock().requiredFeatures();
     }
+
+    public InteractionResult placeItemWithoutPlayer(BlockPlaceContext context){
+        if (!this.getBlock().isEnabled(context.getLevel().enabledFeatures())) {
+            return InteractionResult.FAIL;
+        } else if (!context.canPlace()) {
+            return InteractionResult.FAIL;
+        } else {
+            BlockPlaceContext blockactioncontext1 = this.updatePlacementContext(context);
+
+            if (blockactioncontext1 == null) {
+                return InteractionResult.FAIL;
+            } else {
+                // CraftBukkit start - special case for handling block placement with water lilies and snow buckets
+
+                BlockState iblockdata = de.verdox.mccreativelab.behaviour.ItemBehaviourUtil.placeBlockAction(context.getPlayer(), context.getClickedPos(), context.getLevel(), context.getItemInHand(), context.getLevel().getBlockState(context.getClickedPos()), () -> this.getPlacementState(blockactioncontext1));
+
+                org.bukkit.block.BlockState blockstate = null;
+                if (this instanceof PlaceOnWaterBlockItem || this instanceof SolidBucketItem) {
+                    blockstate = org.bukkit.craftbukkit.block.CraftBlockStates.getBlockState(blockactioncontext1.getLevel(), blockactioncontext1.getClickedPos());
+                }
+                final org.bukkit.block.BlockState oldBlockstate = blockstate != null ? blockstate : org.bukkit.craftbukkit.block.CraftBlockStates.getBlockState(blockactioncontext1.getLevel(), blockactioncontext1.getClickedPos()); // Paper - Reset placed block on exception
+                // CraftBukkit end
+
+                if (iblockdata == null) {
+                    return InteractionResult.FAIL;
+                } else if (!this.placeBlock(blockactioncontext1, iblockdata)) {
+                    return InteractionResult.FAIL;
+                } else {
+                    BlockPos blockposition = blockactioncontext1.getClickedPos();
+                    Level world = blockactioncontext1.getLevel();
+                    ItemStack itemstack = blockactioncontext1.getItemInHand();
+                    BlockState iblockdata1 = world.getBlockState(blockposition);
+
+                    if (iblockdata1.is(iblockdata.getBlock())) {
+                        iblockdata1 = this.updateBlockStateFromTag(blockposition, world, itemstack, iblockdata1);
+                        // Paper start - Reset placed block on exception
+                        try {
+                            this.updateCustomBlockEntityTag(blockposition, world, null, itemstack, iblockdata1);
+                            BlockItem.updateBlockEntityComponents(world, blockposition, itemstack);
+                        } catch (Exception e) {
+                            oldBlockstate.update(true, false);
+                            throw e; // Rethrow exception if not placed by a player
+                        }
+                        // Paper end - Reset placed block on exception
+                        iblockdata1.getBlock().setPlacedBy(world, blockposition, iblockdata1, null, itemstack);
+                        // CraftBukkit start
+                    }
+
+                    SoundType soundeffecttype = iblockdata1.getSoundType();
+
+                    //TODO: de.verdox.mccreativelab.behaviour.BlockBehaviourUtil.getInstance().onPlaceCallback();
+                    world.playSound(null, blockposition, this.getPlaceSound(iblockdata1), net.minecraft.sounds.SoundSource.BLOCKS, (soundeffecttype.getVolume() + 1.0F) / 2.0F, soundeffecttype.getPitch() * 0.8F); // Paper - Fix block place logic; reintroduce this for the dispenser (i.e the shulker)
+                    world.gameEvent((Holder) GameEvent.BLOCK_PLACE, blockposition, GameEvent.Context.of(null, iblockdata1));
+                    return InteractionResult.sidedSuccess(world.isClientSide);
+                }
+            }
+        }
+    }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/ComposterBlock.java b/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
index d3d12f9114173f4971f95d7ef895a4374705bd3f..df25dbd097e0badd80a424de5bd3ca74b8f08fb4 100644
--- a/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
@@ -78,6 +78,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
         float f3 = 0.85F;
         float f4 = 1.0F;
 
+        //TODO: [MCCLab] - Make this changeable via API
         ComposterBlock.add(0.3F, Items.JUNGLE_LEAVES);
         ComposterBlock.add(0.3F, Items.OAK_LEAVES);
         ComposterBlock.add(0.3F, Items.SPRUCE_LEAVES);
