package de.verdox.mccreativelab.impl.vanilla.platform.converter;

import de.verdox.mccreativelab.impl.vanilla.wrapper.item.components.NMSBlockItemStateProperties;
import de.verdox.mccreativelab.wrapper.types.MCCJukeboxSong;
import de.verdox.mccreativelab.wrapper.platform.MCCPlatform;
import de.verdox.mccreativelab.wrapper.item.components.MCCCustomModelData;
import de.verdox.mccreativelab.wrapper.types.MCCEnchantment;
import de.verdox.mccreativelab.wrapper.item.components.MCCTool;
import de.verdox.mccreativelab.conversion.ConversionService;
import de.verdox.mccreativelab.impl.vanilla.types.NMSTrimPattern;
import de.verdox.mccreativelab.impl.vanilla.wrapper.item.components.NMSSuspiciousStewEffects;
import de.verdox.mccreativelab.wrapper.item.components.MCCFireworkExplosion;
import de.verdox.mccreativelab.wrapper.types.MCCArmorMaterial;
import de.verdox.mccreativelab.impl.vanilla.item.components.NMSDataComponentType;
import de.verdox.mccreativelab.impl.vanilla.wrapper.item.components.NMSUnbreakable;
import de.verdox.mccreativelab.wrapper.types.MCCPoiType;
import de.verdox.mccreativelab.wrapper.item.components.MCCBlockItemStateProperties;
import de.verdox.mccreativelab.impl.vanilla.types.NMSInstrument;
import de.verdox.mccreativelab.impl.vanilla.wrapper.item.components.NMSDyedItemColor;
import de.verdox.mccreativelab.wrapper.item.components.MCCJukeboxPlayable;
import de.verdox.mccreativelab.wrapper.item.components.MCCArmorTrim;
import de.verdox.mccreativelab.wrapper.item.components.MCCDataComponentType;
import de.verdox.mccreativelab.impl.vanilla.wrapper.item.components.NMSFoodProperties;
import de.verdox.mccreativelab.impl.vanilla.wrapper.item.components.NMSMapDecorations;
import de.verdox.mccreativelab.impl.vanilla.wrapper.item.components.NMSJukeboxPlayable;
import de.verdox.mccreativelab.wrapper.types.MCCGameEvent;
import de.verdox.mccreativelab.impl.vanilla.wrapper.item.components.NMSItemAttributeModifiers;
import de.verdox.mccreativelab.impl.vanilla.types.NMSJukeboxSong;
import de.verdox.mccreativelab.wrapper.item.components.MCCLodestoneTracker;
import de.verdox.mccreativelab.wrapper.item.components.MCCUnbreakable;
import de.verdox.mccreativelab.impl.vanilla.wrapper.item.components.NMSMapId;
import de.verdox.mccreativelab.wrapper.types.MCCDecoratedPotPattern;
import de.verdox.mccreativelab.wrapper.item.components.MCCMapDecorations;
import de.verdox.mccreativelab.wrapper.types.MCCVillagerProfession;
import de.verdox.mccreativelab.wrapper.item.components.MCCFoodProperties;
import de.verdox.mccreativelab.impl.vanilla.wrapper.item.components.NMSLodestoneTracker;
import de.verdox.mccreativelab.impl.vanilla.types.NMSMenuType;
import de.verdox.mccreativelab.impl.vanilla.types.NMSGameEvent;
import de.verdox.mccreativelab.impl.vanilla.wrapper.item.components.NMSPotionContents;
import de.verdox.mccreativelab.impl.vanilla.wrapper.item.components.NMSLockCode;
import de.verdox.mccreativelab.wrapper.item.components.MCCMapId;
import de.verdox.mccreativelab.impl.vanilla.wrapper.item.components.NMSCustomModelData;
import de.verdox.mccreativelab.wrapper.item.components.MCCMapItemColor;
import de.verdox.mccreativelab.impl.vanilla.wrapper.item.components.NMSSeededContainerLoot;
import de.verdox.mccreativelab.impl.vanilla.types.NMSArmorMaterial;
import de.verdox.mccreativelab.impl.vanilla.wrapper.item.components.NMSFireworkExplosion;
import de.verdox.mccreativelab.wrapper.item.components.MCCLockCode;
import de.verdox.mccreativelab.wrapper.item.components.MCCSeededContainerLoot;
import de.verdox.mccreativelab.wrapper.types.MCCMenuType;
import de.verdox.mccreativelab.impl.vanilla.types.NMSDecoratedPotPattern;
import de.verdox.mccreativelab.impl.vanilla.types.NMSPoiType;
import de.verdox.mccreativelab.impl.vanilla.types.NMSEnchantment;
import de.verdox.mccreativelab.wrapper.types.MCCTrimPattern;
import de.verdox.mccreativelab.impl.vanilla.wrapper.item.NMSAttributeModifier;
import de.verdox.mccreativelab.impl.vanilla.types.NMSFrogVariant;
import de.verdox.mccreativelab.wrapper.item.components.MCCDyedItemColor;
import de.verdox.mccreativelab.wrapper.item.components.MCCSuspiciousStewEffects;
import de.verdox.mccreativelab.wrapper.item.components.MCCResolvableProfile;
import de.verdox.mccreativelab.impl.vanilla.types.NMSTrimMaterial;
import de.verdox.mccreativelab.wrapper.item.components.MCCItemAttributeModifiers;
import de.verdox.mccreativelab.wrapper.types.MCCInstrument;
import de.verdox.mccreativelab.wrapper.item.components.MCCPotionContents;
import de.verdox.mccreativelab.wrapper.types.MCCFrogVariant;
import de.verdox.mccreativelab.impl.vanilla.wrapper.item.components.NMSResolvableProfile;
import de.verdox.mccreativelab.impl.vanilla.wrapper.item.components.NMSArmorTrim;
import de.verdox.mccreativelab.wrapper.types.MCCPaintingVariant;
import de.verdox.mccreativelab.impl.vanilla.types.NMSPaintingVariant;
import de.verdox.mccreativelab.wrapper.types.MCCTrimMaterial;
import de.verdox.mccreativelab.wrapper.item.components.MCCAttributeModifier;
import de.verdox.mccreativelab.impl.vanilla.wrapper.item.components.NMSTool;
import de.verdox.mccreativelab.impl.vanilla.wrapper.item.components.NMSMapItemColor;
import de.verdox.mccreativelab.wrapper.types.MCCDimensionType;
import de.verdox.mccreativelab.impl.vanilla.types.NMSDimensionType;
import de.verdox.mccreativelab.impl.vanilla.types.NMSVillagerProfession;

public class GeneratedConverters  {

	public static void init(ConversionService conversionService){
		conversionService.registerPlatformType(MCCMenuType.class, NMSMenuType.CONVERTER);
		conversionService.registerPlatformType(MCCBlockItemStateProperties.class, NMSBlockItemStateProperties.CONVERTER);
		conversionService.registerPlatformType(MCCLodestoneTracker.class, NMSLodestoneTracker.CONVERTER);
		conversionService.registerPlatformType(MCCPotionContents.class, NMSPotionContents.CONVERTER);
		conversionService.registerPlatformType(MCCTool.MCCRule.class, NMSTool.NMSRule.CONVERTER);
		conversionService.registerPlatformType(MCCEnchantment.MCCEnchantmentDefinition.class, NMSEnchantment.NMSEnchantmentDefinition.CONVERTER);
		conversionService.registerPlatformType(MCCUnbreakable.class, NMSUnbreakable.CONVERTER);
		conversionService.registerPlatformType(MCCMapDecorations.class, NMSMapDecorations.CONVERTER);
		conversionService.registerPlatformType(MCCDimensionType.MCCMonsterSettings.class, NMSDimensionType.NMSMonsterSettings.CONVERTER);
		conversionService.registerPlatformType(MCCPoiType.class, NMSPoiType.CONVERTER);
		conversionService.registerPlatformType(MCCEnchantment.class, NMSEnchantment.CONVERTER);
		conversionService.registerPlatformType(MCCDecoratedPotPattern.class, NMSDecoratedPotPattern.CONVERTER);
		conversionService.registerPlatformType(MCCTrimPattern.class, NMSTrimPattern.CONVERTER);
		conversionService.registerPlatformType(MCCMapId.class, NMSMapId.CONVERTER);
		conversionService.registerPlatformType(MCCSuspiciousStewEffects.class, NMSSuspiciousStewEffects.CONVERTER);
		conversionService.registerPlatformType(MCCDyedItemColor.class, NMSDyedItemColor.CONVERTER);
		conversionService.registerPlatformType(MCCPaintingVariant.class, NMSPaintingVariant.CONVERTER);
		conversionService.registerPlatformType(MCCItemAttributeModifiers.MCCEntry.class, NMSItemAttributeModifiers.NMSEntry.CONVERTER);
		conversionService.registerPlatformType(MCCFoodProperties.MCCBuilder.class, NMSFoodProperties.NMSBuilder.CONVERTER);
		conversionService.registerPlatformType(MCCGameEvent.MCCListenerInfo.class, NMSGameEvent.NMSListenerInfo.CONVERTER);
		conversionService.registerPlatformType(MCCAttributeModifier.class, NMSAttributeModifier.CONVERTER);
		conversionService.registerPlatformType(MCCItemAttributeModifiers.MCCBuilder.class, NMSItemAttributeModifiers.NMSBuilder.CONVERTER);
		conversionService.registerPlatformType(MCCMapDecorations.MCCEntry.class, NMSMapDecorations.NMSEntry.CONVERTER);
		conversionService.registerPlatformType(MCCLockCode.class, NMSLockCode.CONVERTER);
		conversionService.registerPlatformType(MCCEnchantment.MCCCost.class, NMSEnchantment.NMSCost.CONVERTER);
		conversionService.registerPlatformType(MCCInstrument.class, NMSInstrument.CONVERTER);
		conversionService.registerPlatformType(MCCSuspiciousStewEffects.MCCEntry.class, NMSSuspiciousStewEffects.NMSEntry.CONVERTER);
		conversionService.registerPlatformType(MCCDimensionType.class, NMSDimensionType.CONVERTER);
		conversionService.registerPlatformType(MCCJukeboxPlayable.class, NMSJukeboxPlayable.CONVERTER);
		conversionService.registerPlatformType(MCCFrogVariant.class, NMSFrogVariant.CONVERTER);
		conversionService.registerPlatformType(MCCGameEvent.MCCContext.class, NMSGameEvent.NMSContext.CONVERTER);
		conversionService.registerPlatformType(MCCCustomModelData.class, NMSCustomModelData.CONVERTER);
		conversionService.registerPlatformType(MCCFoodProperties.MCCPossibleEffect.class, NMSFoodProperties.NMSPossibleEffect.CONVERTER);
		conversionService.registerPlatformType(MCCMapItemColor.class, NMSMapItemColor.CONVERTER);
		conversionService.registerPlatformType(MCCGameEvent.class, NMSGameEvent.CONVERTER);
		conversionService.registerPlatformType(MCCArmorMaterial.MCCLayer.class, NMSArmorMaterial.NMSLayer.CONVERTER);
		conversionService.registerPlatformType(MCCSeededContainerLoot.class, NMSSeededContainerLoot.CONVERTER);
		conversionService.registerPlatformType(MCCResolvableProfile.class, NMSResolvableProfile.CONVERTER);
		conversionService.registerPlatformType(MCCDataComponentType.class, new DataComponentTypeConverter());
		conversionService.registerPlatformType(MCCTool.class, NMSTool.CONVERTER);
		conversionService.registerPlatformType(MCCVillagerProfession.class, NMSVillagerProfession.CONVERTER);
		conversionService.registerPlatformType(MCCFoodProperties.class, NMSFoodProperties.CONVERTER);
		conversionService.registerPlatformType(MCCJukeboxSong.class, NMSJukeboxSong.CONVERTER);
		conversionService.registerPlatformType(MCCTrimMaterial.class, NMSTrimMaterial.CONVERTER);
		conversionService.registerPlatformType(MCCFireworkExplosion.class, NMSFireworkExplosion.CONVERTER);
		conversionService.registerPlatformType(MCCArmorTrim.class, NMSArmorTrim.CONVERTER);
		conversionService.registerPlatformType(MCCItemAttributeModifiers.class, NMSItemAttributeModifiers.CONVERTER);
		conversionService.registerPlatformType(MCCArmorMaterial.class, NMSArmorMaterial.CONVERTER);
		conversionService.registerPlatformType(MCCEnchantment.MCCBuilder.class, NMSEnchantment.NMSBuilder.CONVERTER);
	}

}
