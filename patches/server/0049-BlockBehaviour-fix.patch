From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: verdox <mail.ysp@web.de>
Date: Wed, 19 Jun 2024 15:14:51 +0000
Subject: [PATCH] BlockBehaviour fix


diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java b/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
index 1aac95b03a9e2e37c24f2a30bcb259c1424e1c78..4500ed8fddd723e9f61555261d5c0d2e7404723c 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
@@ -165,7 +165,7 @@ public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiom
     private void replaceMissingSections(Registry<Biome> biomeRegistry, LevelChunkSection[] sectionArray) { // Paper - Anti-Xray - static -> non-static
         for (int i = 0; i < sectionArray.length; ++i) {
             if (sectionArray[i] == null) {
-                sectionArray[i] = new LevelChunkSection(biomeRegistry, this.levelHeightAccessor instanceof net.minecraft.world.level.Level ? (net.minecraft.world.level.Level) this.levelHeightAccessor : null, this.chunkPos, this.levelHeightAccessor.getSectionYFromSectionIndex(i)); // Paper start - Anti-Xray - Add parameters
+                sectionArray[i] = new LevelChunkSection(biomeRegistry, this.levelHeightAccessor instanceof net.minecraft.world.level.Level ? (net.minecraft.world.level.Level) this.levelHeightAccessor : null, this.chunkPos, i); // Paper start - Anti-Xray - Add parameters
             }
         }
 
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
index 428c40f1c6dcca936a3f44bc002e29f77251ff50..ec86221a1b1900f1f1dbbd6e29e08c69245161dc 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
@@ -31,7 +31,7 @@ public class LevelChunkSection {
     // MCCLab start - Add BlockBehaviour
     @org.jetbrains.annotations.NotNull private net.minecraft.world.level.Level level;
     @org.jetbrains.annotations.NotNull private net.minecraft.world.level.ChunkPos chunkPos;
-    private int chunkSectionY;
+    private final int chunkSectionY;
     // MCCLab end - Add BlockBehaviour
 
     private void updateBlockCallback(final int x, final int y, final int z, final BlockState oldState, final BlockState newState) {
@@ -48,13 +48,14 @@ public class LevelChunkSection {
     }
     // Paper end - optimise collisions
 
-    public LevelChunkSection(net.minecraft.world.level.Level level, net.minecraft.world.level.ChunkPos chunkPos, PalettedContainer<BlockState> datapaletteblock, PalettedContainer<Holder<Biome>> palettedcontainerro) {
+    public LevelChunkSection(net.minecraft.world.level.Level level, net.minecraft.world.level.ChunkPos chunkPos, PalettedContainer<BlockState> datapaletteblock, PalettedContainer<Holder<Biome>> palettedcontainerro, int chunkSectionY) {
         // CraftBukkit end
         this.level = level;
         this.chunkPos = chunkPos;
         this.states = datapaletteblock;
         this.biomes = palettedcontainerro;
         this.recalcBlockCounts();
+        this.chunkSectionY = chunkSectionY;
     }
 
     // Paper start - Anti-Xray - Add parameters
@@ -101,7 +102,7 @@ public class LevelChunkSection {
 
         // MCCLab start - Add BlockBehaviour
         int globalX = chunkPos != null ? chunkPos.x * 16 + x : -1;
-        int globalY = (chunkSectionY << 4) + y;
+        int globalY = (((level.getMinSection() + chunkSectionY) << 4) + y);
         int globalZ = chunkPos != null ? chunkPos.z * 16 + z : -1;
         // MCCLab end - Add BlockBehaviour
 
